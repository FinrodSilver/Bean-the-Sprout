<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bean3IdleRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_beanMain</parentName>
  <maskName>spr_invis</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

grav = 0.8;   // gravity
hsp = 0;      // hspeed
vsp = 0;      // vspeed
jumpSpeed = 12;  // Jump speed for final form
moveSpeed = 3; // Movement speed for final form can be changed



camface = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Flash
image_blend = -1; //Resets the value of image_blend to default
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step code for Bean
// Get the player input
 
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
key_shoot = keyboard_check(vk_shift);
image_speed = 0.2;
isLeft = keyboard_check_pressed(vk_left);
isRight = keyboard_check_pressed(vk_right); 



// React to the input
move = key_left + key_right;    // == 0, -1, or +1
hsp = move * moveSpeed;   // Speed set in variable

// Facing Left/Right/Idle/jump
if (isLeft == 1 ) || (sprite_index == spr_bean3WalkLeft)
    ||  (sprite_index == spr_bean3JumpLeft) {
    sprite_index = spr_bean3IdleLeft;
    if (hsp &lt; 0) {
    sprite_index = spr_bean3WalkLeft; 
    }
    if (vsp &lt; 0)  {
   sprite_index = spr_bean3JumpLeft;
   }
}

if  (isRight == 1) || (sprite_index == spr_bean3WalkRight) 
    || (sprite_index == spr_bean3JumpRight) {
   sprite_index = spr_bean3IdleRight; 
   if (hsp &gt; 0) {
   sprite_index = spr_bean3WalkRight;  
  } 
   if (vsp &lt; 0) {
   sprite_index = spr_bean3JumpRight;
   }
}

if (key_jump == 1) &amp;&amp; (sprite_index == spr_bean3IdleRight) {
    sprite_index = spr_bean3JumpRight;
}
if (key_jump == 1) &amp;&amp; (sprite_index == spr_bean3IdleLeft) {
    sprite_index = spr_bean3JumpLeft;
}


//Determine playing sound
if (key_jump == true) {  // play jump sound
     audio_play_sound(snd_beanJump,1,0);
     }

if (vsp &lt; 10) vsp += grav;  // Gravity

if (place_meeting(x,y+1,obj_ground1)) // Checking if on the floor
    {
        vsp = key_jump * -jumpSpeed;
    }
    
    
// Push a Boulder
scr_push();

// H and V Collision script , then movement
scr_move(hsp, vsp);

// Bean Death
if (health &lt;= 0) &amp;&amp; (lives &lt;= 0) {
    audio_play_sound(snd_beanDie, 1, 0);
    instance_destroy();
    room_goto(rm_gameOver);
} else if (health &lt;= 0) {
    audio_play_sound(snd_beanDie, 1, 0);
    instance_destroy();
    instance_create(global.targetBefore_x, global.targetBefore_y, obj_bean3rd);
    lives -= 1;
    health = 100;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bean Dies
audio_play_sound(snd_beanDie, 1, 0);
if lives &lt;= 0 {
    instance_destroy();
    room_goto(rm_gameOver);
} else {
instance_destroy();
instance_create(global.targetBefore_x, global.targetBefore_y, obj_bean3rd);
lives -= 1;
health = 100;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
