<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_beanIdleRight</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

grav = 0.4;   // gravity
hsp = 0;      // hspeed
vsp = 0;      // vspeed
jumpSpeed = 7;  // Jump speed for final form
moveSpeed = 4; // Movement speed for final form can be changed
glideSpeed = 16; // Glide speed for final form of Bean
slide = 0;
knockBack = 5;


camface = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement for Bean
// Get the player input
 
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
key_glide = keyboard_check_pressed(vk_shift);

image_speed = 0.2;



// React to the input
move = key_left + key_right;    // == 0, -1, or +1
hsp = move * moveSpeed;   // Speed set in variable

// Facing Left/Right/Idle/jump
if (move == -1 &amp;&amp; hsp == 0) {
     sprite_index = spr_beanIdleLeft;
     } 
if  (move == 0 &amp;&amp; hsp == 0) {
    sprite_index = spr_beanIdleRight;
    }
if (move == 1 &amp;&amp; hsp &gt; 0) {
    sprite_index = spr_beanRunRight;
    }
if (move == -1 &amp;&amp; hsp &lt; 0) {
    sprite_index = spr_beanRunLeft;
    }
if (move == -1 &amp;&amp; vsp &lt; 0) {
     sprite_index = spr_beanJumpLeft;
     }
if (move == 1 &amp;&amp; vsp &lt; 0) {
     sprite_index = spr_beanJumpRight;
     }
if (move == 0 &amp;&amp; vsp &lt; 0) {
     sprite_index = spr_beanJumpRight;
     }

//Determine playing sound
if (key_jump == true) {  // play jump sound
     audio_play_sound(snd_beanJump,1,0);
     }



if (vsp &lt; 10) vsp += grav;  // Gravity


if (place_meeting(x,y+1,obj_ground1)) // Checking if on the floor
    {
        vsp = key_jump * -jumpSpeed;   
    }
    
    
// Push a Boulder
scr_push();

// H and V Collision script , then movement
scr_move(hsp, vsp);

//Smart Cam
view_xview[0] += ((x - (view_xview[0]/2) - view_xview[0]) + camface) * 0.05;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
